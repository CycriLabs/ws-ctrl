#!/usr/bin/env node
import{Command as pe}from"commander";var N={name:"@cycrilabs/ws-ctrl",version:"1.3.0",description:"CLI tool to initialize a development workspace",repository:{type:"git",url:"git+https://github.com/CycriLabs/ws-ctrl.git"},publishConfig:{access:"public"},author:"Marc Scheib",license:"MIT",bugs:{url:"https://github.com/CycriLabs/ws-ctrl/issues"},homepage:"https://github.com/CycriLabs/ws-ctrl#readme",files:["dist"],bin:{"@cycrilabs/ws-ctrl":"dist/index.js"},type:"module",engines:{node:">=20"},scripts:{dev:"tsx src/index.ts",lint:"eslint ./src",test:"vitest","test:coverage":"vitest run --coverage",build:"tsup","build:watch":"tsup --watch",release:"npx --yes -p @semantic-release/changelog -p @semantic-release/git semantic-release",prepare:"husky"},devDependencies:{"@commitlint/cli":"^19.8.0","@commitlint/config-conventional":"^19.8.0","@eslint/js":"^9.25.1","@types/prompts":"^2.4.9","@vitest/coverage-v8":"^3.1.2",eslint:"^9.25.1",globals:"^16.0.0",husky:"^9.1.7","lint-staged":"^15.5.1",memfs:"^4.17.0",prettier:"^3.5.3",tempy:"^3.1.0",tsup:"^8.4.0",tsx:"^4.19.3",typescript:"^5.8.3","typescript-eslint":"^8.31.0",vitest:"^3.1.2"},dependencies:{chalk:"^5.4.1",commander:"^13.1.0",conf:"^13.1.0",dotenv:"^16.5.0",prompts:"^2.4.2"}};import{Command as Yt,Option as Zt}from"commander";import jt from"conf";import kt from"chalk";var{red:et,yellow:rt,green:ot,bold:P}=kt;function L(r){if(typeof r=="string")return r;if(Array.isArray(r))return`[${r.map(L).join(", ")}]`;if(r==null)return""+r;let t=r.overriddenName||r.name;if(t)return`${t}`;let e=r.toString();if(e==null)return""+e;let o=e.indexOf(`
`);return o>=0?e.slice(0,o):e}var W=class{constructor(t,e){this._desc=t}toString(){return`InjectionToken ${this._desc}`}},l=class{};var O=class r extends l{static instance=null;static getInstance(t){if(!this.instance&&!t)throw new Error("Injector not initialized. Please provide providers.");return this.instance||(this.instance=new r(t||[])),this.instance}records;constructor(t){super(),this.records=new Map(t),this.records.set(l,{factory:()=>this,value:this})}register(t,e){if(this.records.has(t))throw new Error(`Token ${L(t)} already registered.`);this.records.set(t,{factory:e})}get(t){if(!this.records.has(t))throw new Error(`Could not find the token ${L(t)}`);let e=this.records.get(t);return e.value||(e.value=e.factory()),e.value}};function n(r){return O.getInstance().get(r)}import{promises as S}from"node:fs";import{extname as At,join as X}from"node:path";async function R(r){return S.readFile(r,"utf8")}async function M(r,t){return S.writeFile(r,t,"utf8")}async function j(r,t,e=[]){try{await S.mkdir(t,{recursive:!0})}catch(s){if(s instanceof Error&&"code"in s&&s.code!=="EEXIST")throw s}let o=await S.readdir(r);await Promise.all(o.filter(s=>!e.includes(s)).map(async s=>{let i=X(r,s),a=X(t,s);(await S.stat(i)).isDirectory()?await j(i,a):await S.copyFile(i,a)}))}async function b(r){try{let o=(await S.readdir(r)).filter(i=>At(i).toLowerCase()===".json").map(async i=>{let a=X(r,i),c=await R(a);try{return JSON.parse(c)}catch(p){throw new Error(`Failed to parse JSON in file ${i}: ${p.message}`)}});return await Promise.all(o)}catch(t){throw new Error(`Error loading JSON files: ${t.message}`)}}import{spawnSync as st}from"node:child_process";import{existsSync as Dt}from"node:fs";import{join as Ut}from"node:path";async function it(r,t,e){return Dt(Ut(e,".git"))?st("git",["pull"],{cwd:e,stdio:"inherit"}):st("git",["clone",r,e],{cwd:t,stdio:"inherit"}),Promise.resolve()}var u=class{log(t,e){let o=e?e(t):t;console.log(o)}error(t){this.log(t,et)}warn(t){this.log(t,rt)}success(t){this.log(t,ot)}};import{execSync as Ot}from"node:child_process";var nt=process.platform;async function B(r,t){return Ot(r,{cwd:t,stdio:"inherit"})}import{createHash as bt}from"node:crypto";import{access as at,constants as Ft}from"node:fs/promises";import{join as $t,resolve as Wt}from"node:path";function v(r){return Wt(r)}function Q(r){let t=v(r);return bt("md5").update(t).digest("hex").substring(0,10)}async function G(r){try{await at(r)}catch{return n(u).error('The provided workspacePath "'+r+'" does not exist.'),!1}let t=Q(r);try{return await at($t(r,`${t}.json`),Ft.F_OK),!0}catch{return n(u).error('Expected to find the file "'+t+'.json" but was not found.'),!1}}var y=new W("Config"),_t={workspacePath:{type:"string"},organization:{type:"string"},templatesRepository:{type:["string","null"]}},I;function ct(r){return I=new jt({schema:_t,cwd:v(r),configName:Q(r)}),I}function Nt(r){return{workspacePath:v(r),organization:"none",templatesRepository:null}}function pt(r,t,e){return I=ct(r),I.set("workspacePath",v(r)),I.set("organization",t),I.set("templatesRepository",e),I}async function K(r,t=!1){let e=r.trim();if(t)return n(u).log("Running within non-workspace directory..."),Nt(e);if(!await G(e))throw new Error("The given path is no valid workspace.");return ct(e).store}import{join as x}from"node:path";var mt="templates",w="config",ut="docker",lt="git-templates";var gt="repositories",ft="servers",dt="use-cases",Y="development";import{dirname as Lt}from"node:path";import{fileURLToPath as Mt}from"node:url";function xt(){let r=Mt(import.meta.url);return Lt(r)}var m=class{logger=n(u);config=n(y);getPackageTemplatesDir(){return x(this.#t(1),mt)}getGitTemplatesDir(){return x(this.#t(),w,lt)}getConfigDir(){return x(this.#t(),w)}getDockerDir(){return x(this.#t(),w,ut)}getServersDir(){return x(this.#t(),w,ft)}getUseCasesDir(){return x(this.#t(),w,dt)}getRepositoriesDir(){return x(this.#t(),w,gt)}getDevelopmentDir(){return x(this.#t(),w,Y)}getWorkingDir(){return x(this.#t(),Y)}#t(t=0){return t===0?this.getWorkspacePath():xt()}getWorkspacePath(){return this.config.workspacePath}getTemplatesRepository(){return this.config.templatesRepository}createRepositoryUrl(t){return`git@bitbucket.org:${this.config.organization}/${t}.git`}async initWorkspace(){await this.syncTemplates(),await this.copyDevelopmentDirectory()}async syncTemplates(){let t=this.getPackageTemplatesDir();this.logger.log(`Syncing templates from ${t}...`),await j(t,this.getWorkspacePath()),await this.syncRepositoryTemplates()}async syncRepositoryTemplates(){let t=this.getTemplatesRepository();if(t){let e=this.createRepositoryUrl(t);this.logger.log(`Syncing templates from repository ${e}...`),await it(e,this.getWorkspacePath(),this.getGitTemplatesDir()),await j(this.getGitTemplatesDir(),this.getConfigDir(),[".git"])}}async copyDevelopmentDirectory(){await j(this.getDevelopmentDir(),this.getWorkingDir())}};var h=class{templatesAccess=n(m);async loadUseCases(...t){let e=["DISABLED",...t];return this.loadFiles().then(o=>o.map(s=>this.#t(s))).then(o=>o.filter(s=>!e.includes(s.state)))}async loadFiles(){return b(this.templatesAccess.getUseCasesDir())}#t(t){return{...t,description:t.description||"",state:t.state||"ENABLED"}}};var k=class{executeFormula(t,e){try{let o=this.#t(t,e);return(0,eval)(o)}catch(o){throw new Error(`Error executing formula: ${o}`)}}#t(t,e){return`${Object.entries(e).reduce((s,[i,a])=>`${s}const ${i} = ${JSON.stringify(a)};`,"")}${t}`}};var A=class{templatesAccess=n(m);async loadRepositories(){return this.loadFiles().then(t=>t.map(e=>this.#t(e)))}async loadFiles(){return b(this.templatesAccess.getRepositoriesDir())}#t(t){return{...t,alias:t.alias||t.name,url:t.url||this.templatesAccess.createRepositoryUrl(t.name),attributes:{type:"UNKNOWN",...t.attributes}}}};var D=class{templatesAccess=n(m);async loadServers(){return this.loadFiles()}async loadFiles(){return b(this.templatesAccess.getServersDir())}};var U=class{templatesAccess=n(m);serversRepository=n(D);repositoriesRepository=n(A);async createContext(t={}){return{...t,WORKSPACE_PATH:this.templatesAccess.getWorkspacePath(),WORKING_DIR:this.templatesAccess.getWorkingDir(),SERVERS:await this.serversRepository.loadServers(),REPOSITORIES:await this.repositoriesRepository.loadRepositories(),OS:nt}}};var C=class{constructor(t,e){this.scriptExecutor=t;this.templatesAccess=e}async execute(t,e){throw new Error("Method not implemented.")}};var z=class extends C{async execute(t,e){let{inputFile:o,outputFile:s,context:i}=t;if(!o)throw new Error("No input file provided.");if(!i?.name||!i?.value)throw new Error("Missing replacement target or value.");let a=this.scriptExecutor.executeFormula(o,e),c=await R(a),{name:p,value:d}=i,f=this.scriptExecutor.executeFormula(p,e).replace(/[.*+?^${}()|[\]\\]/g,"\\$&"),T=this.scriptExecutor.executeFormula(d,e),$=c.replace(new RegExp(`${f}=.*`),`${f}=${T}`),q=this.scriptExecutor.executeFormula(s||o,e);return await M(q,$),e}};import Ht from"prompts";import Bt from"prompts";function F(r){r.aborted&&(process.stdout.write("\x1B[?25h"),process.stdout.write(`
`),process.exit(1))}function E(r){return typeof r=="string"&&!!r.trim()||typeof r=="boolean"}async function Gt(r,t,e,o={}){return Bt({onState:F,type:r,name:"entity",message:`Select the ${t}`,choices:e.filter(o.displayFilter||(()=>!0)).map(s=>({title:o.createTitle?o.createTitle(s):s.name,value:s.id}))}).then(({entity:s})=>s)}function Kt(r,t){let e=t.reduce((o,s)=>({...o,[s.id]:s}),{});if(typeof r=="string"){let o=e[r.trim()];if(o)return[o]}else{if(Array.isArray(r))return r.map(o=>e[o.trim()]);throw new Error(`Can find entity for value ${r}.`)}throw new Error(`Entity for selection ${P(r)} not found.`)}async function zt(r,t,e,o,s={}){let i=E(e)&&typeof e=="string"?e:await Gt(r,t,o,s);return Kt(i,o)}async function ht(r,t,e,o={}){let[s]=await zt("select",r,t,e,o);return s}import Vt from"prompts";async function yt(r,t){return Vt({onState:F,type:r,name:"input",message:t,initial:r==="toggle"?!0:void 0,active:"yes",inactive:"no"}).then(({input:e})=>e)}async function _(r,t,e){return E(e)?e:yt(r,t)}async function Z(r,t){let e=E(t)?t:await yt("text",r);if(E(e)&&typeof e=="string")return e.trim();throw Error("No input path provided.")}async function Jt(r,t,e){return Ht({onState:F,type:r,name:"input",message:t,choices:e.map(({id:o,name:s})=>({title:s,value:o}))}).then(({input:o})=>o)}function qt(r,t){let e=t.reduce((o,s)=>({...o,[s.id]:s}),{});if(typeof r=="string"){let o=e[r.trim()];if(o)return o}else{if(Array.isArray(r))return r.map(o=>e[o.trim()]);throw new Error(`Can find entity for value ${r}.`)}throw new Error(`Entity for selection ${P(r)} not found.`)}var V=class extends C{async execute(t,e){let{name:o,message:s,type:i,entities:a,entityKey:c}=t.context;if(!o||!s||!i)throw new Error("Prompt name, message or type missing.");let p;switch(i){case"select":case"multiselect":{let d=(c?e[c]:a)||[],f=await Jt(i,s,d);p=qt(f,d);break}default:{p=await _(i,s);break}}return{...e,[o]:p}}};import Xt from"dotenv";var H=class extends C{async execute(t,e){let o={...e},s=`${this.templatesAccess.getWorkspacePath()}/services.env`,i=Xt.parse(await R(s));Object.assign(o,i),Object.entries(t.context||{}).forEach(([q,vt])=>{o[q]=this.scriptExecutor.executeFormula(vt,o)});let{kcVersion:a,authServerUrl:c,authUser:p,authPassword:d,authTenant:f}=o,T=this.templatesAccess.getWorkspacePath(),$=`docker run         --pull=always         --env-file ${T}/.env         --mount type=bind,src="${T}/config/secret-templates",target="/secret-templates,readonly"         --mount type=bind,src="${T}/config/services-config",target="/output"         --rm -i ghcr.io/cycrilabs/keycloak-configurator:${a} export-secrets -s ${c} -u ${p} -p "${d}" -r ${f} -c //secret-templates -o //output`;return await B($,this.templatesAccess.getWorkspacePath()),o}};var tt={"custom-prompt":V,"generate-service-configuration":H,"change-env-var-value":z};var g=class{logger=n(u);templatesAccess=n(m);useCasesRepository=n(h);contextCreator=n(U);scriptExecutor=n(k);async run(t,e={}){if(typeof t=="string"){let s=(await this.useCasesRepository.loadUseCases()).find(({id:i})=>i===t);if(!s)throw new Error(`Use case not found: ${t}`);return await this.#t(s,e)}else return await this.#t(t,e)}async#t(t,e={}){let{name:o,description:s,steps:i}=t,a=await this.contextCreator.createContext(e);return this.logger.log(`Running use case ${P(o)}...`),s&&this.logger.log(`${s}`),i&&i.length!==0?(this.logger.log("Executing steps..."),await this.#s(i,a)):a}async#s(t,e){let o={...e,STEPS:t};for(let s=0;s<t.length;s++){let i=t[s];this.logger.log(`Step ${s+1}: ${i.description||""}`);let a=await this.#i(i,o);Object.assign(o,a)}return o}async#i(t,e){let o={...e,STEP:t},{inputFile:s,abortIf:i,skipIf:a,loop:c}=t;if(s){let p=this.scriptExecutor.executeFormula(s,o);o.INPUT=await R(p)}if(i&&this.scriptExecutor.executeFormula(i,o))throw new Error("Stopping because 'abortIf' formula is met.");if(a&&this.scriptExecutor.executeFormula(a,o))return this.logger.log("Skipping step."),o;if(c){let p=this.scriptExecutor.executeFormula(c.list,o);if(!p||!Array.isArray(p))throw new Error(`List ${P(c.list)} not found in context.`);let d={...o};for(let f=0;f<p.length;f++){let T=p[f],$={...d,[c.name]:T};await this.#e(t,$)}return o}else return await this.#e(t,o)}async#e(t,e){switch(t.type){case"FORMULA":return await this.#n(t,e);case"COMMAND":return await this.#a(t,e);case"EXECUTOR":return await this.#c(t,e);case"PROMPT":return await this.#p(t,e);case"USE_CASE":return await this.#m(t,e);default:throw new Error(`Unknown step type ${t.type}. Stopping.`)}}async#n(t,e){if(!t.formula)throw new Error("Formula missing in step.");return await this.#o(t,e,async()=>{let o=this.scriptExecutor.executeFormula(t.formula,e);return t.outputFile&&typeof o=="string"&&await M(t.outputFile,o),{...e,[t.resultVariable||"STEP_RESULT"]:o}})}async#a(t,e){if(!t.command)throw new Error("Command missing in step.");return await this.#o(t,e,async()=>{let o=this.scriptExecutor.executeFormula(t.command,e);return await B(o,this.templatesAccess.getWorkspacePath()),e})}async#c(t,e){if(!t.executor||!tt[t.executor])throw new Error("Executor missing or not found: "+t.executor);return this.#r(t.executor).execute(t,e)}async#p(t,e){return this.#r("custom-prompt").execute(t,e)}#r(t){return new tt[t](this.scriptExecutor,this.templatesAccess)}async#m(t,e){if(!t.useCase)throw new Error("Use case missing in step.");let s=(await this.useCasesRepository.loadUseCases("INITIAL")).find(i=>i.id===t.useCase);if(!s)throw new Error(`Use case not found: ${t.useCase}`);return this.logger.log("Starting to run references use case..."),await this.run(s,e)}async#o(t,e,o){try{return await o()}catch(s){if(t.catchErrors)return this.logger.error(`Error caught: ${s.message}. Continuing.`),e;throw s}}};import{Argument as Qt}from"commander";var wt=()=>new Qt("[workspace-path]","path to the workspace"),Ct=wt(),J=wt().default(".");var te=new Zt("--templates-repository <templatesRepository>","use a template repository");async function ee(r){return E(r)&&typeof r=="string"?r.trim():await _("toggle","Do you want to use a template repository?")?await _("text","Enter the name of the template repository"):null}async function re(r,t){let e=await Z("Path to the target workspace directory",r),o=v(e);if(await G(o))throw new Error("A workspace for the given path is already existing.");let i=await Z("What is the name of your organization?"),a=await ee(t.templatesRepository),c=pt(o,i,a);n(l).register(y,()=>c.store),await n(m).initWorkspace(),await n(g).run("init")}var Et=new Yt().name("init").description("initialize the workspace").addArgument(Ct).addOption(te).action(re);import{Command as oe,Option as Tt}from"commander";var se=new Tt("-u, --use-case [use-case]","execute the use case with the given name"),ie=new Tt("--debug","enable debug mode");async function ne(r,t){let e=await K(r,t.debug);n(l).register(y,()=>e);let o=n(g),i=await n(h).loadUseCases("INITIAL"),a=await ht("Use case",t.useCase,i,{createTitle:c=>`${c.name} (${c.id})`,displayFilter:c=>c.state!=="HIDDEN"});await o.run(a)}var Pt=new oe().name("run").description("run a use case in the workspace").addArgument(J).addOption(se).addOption(ie).action(ne);import{Command as ae}from"commander";async function ce(r){let t=await K(r);n(l).register(y,()=>t);let e=n(m),o=n(g);await e.syncTemplates(),await o.run("sync")}var St=new ae().name("sync").description("syncs the workspace templates with the package & configured repository").addArgument(J).action(ce);var Rt=()=>process.exit(0);process.on("SIGINT",Rt);process.on("SIGTERM",Rt);process.on("uncaughtException",r=>{n(u).error(r.message),process.exit(1)});O.getInstance([[u,{factory:()=>new u}],[k,{factory:()=>new k}],[m,{factory:()=>new m}],[A,{factory:()=>new A}],[D,{factory:()=>new D}],[h,{factory:()=>new h}],[U,{factory:()=>new U}],[g,{factory:()=>new g}]]);new pe().name(N.name).description(N.description).version(N.version).addCommand(Et).addCommand(Pt).addCommand(St).parseAsync().catch(r=>{n(u).error(r.message),process.exit(1)}).finally(()=>n(u).success("Finished execution."));
